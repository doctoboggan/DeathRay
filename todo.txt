1) build a file extension for the program. (and make sure the program can read and write these extension)
2) adding protection layer for wrong IP in the GUI level.     (30%)
3) adding real time changing files feature. 
4) document modules for less coumented modules. (100%)
5) writing user manual
7) writing developer user
8) writing a easy GUItool for adding Gpib modules. (optional).
9) review all the modules.
10) write a complete GUI (include a welcome page, credit, ...)    (75%)
11) adding the ability to run FPGA and Gpib expermint together. 
12) adding the ability to open old "config" expermint files to run them again with new files.
13) have the ability of refresh rate within GNU level (using "sleep" method). 
14) the ability to open the result of old expermint analyzation.
15) show the user some animations while the software is runnig (not idle)(ex: scanning, ...)
16) catch and fix timeout errors on module level (there is no need any more)  (100%)
17) reorganize directory structure    (100%)
18) try the Finderlist method to get devices list. (optional) (100%)
19)Weelcome page notes:
--->  The IP box in welcome page only accept IPv4. I do not know if we should care about it. 
---> verify is not accurate (it will not if thereis server or not. But, it will not know if it is the right one). 
20) gix the issue with lib_m path (not a bug) (optional).
21) build a setup and uninstall files for the whole program (Also make libraries of the program).  (100%)
22) build a gui for setup and uninstall files (wizard.Also, include have shortcut and some other stuff). (optional) (there is no need, we have nice colorful terminal)  (100%)
23) make sure that uninstall do not crash when the required files do not exsit.   (100%)
24) delete the generated files from setup afer uninstalling.  (100%) 
25) There is bug in data_acq... (90%)
26) adding layer to not show time out to the user by changing the time out when it happens. (try twice before changing) (in low level) (anas task)  (fixed without it)  (100?%)
27) make all the modules accept string and add check method to make sure they are integer or float. (focus in the check method. you may have to layer one to check if the input string (if yes -->) second layer to check if the string input is int or float (depend in the requirement). Also, make sure if it only "int" or "float".   (100%):
---> Done: 
1) setvoltageDC   (new method)
2) setTrigMode    (new method)
3) setImpadnaceChannel  (new method)
4) setdisplayscreen (new mwethod)
5) setcurrentDC (new method)
6) getvoltageDC (new method)
7) getvoltageAC (new method)
8) getTrigMode  (new method)
9) all what left
--------------
28) in the developer manaul:
--> only way to change timeout is via terminal or harcode (no way via GUI).
--> modules are divided to "set" and "get"..... 
--> adding input boxes in the GUI is going to hardcode. In the GUI api, there are five boxes by dafult. To add new box, you need hard code it.
--> All inputs to the modules have to be string regadless of the situation. 
--> the changable perimeters have to be with the configuration of the device (ex: channel can be number for one device but a string for another device) see "setcurrentDC" as an example.
--> Considre all the inputs for a moudle for all accpeted devices in the configuration section (check sction) regadless of the usability of that input (see "getvoltageDC" line#89 as an example).
--> "getIDN" is a special case module. It does not have configuration section (check) because it used under "Deviceattache" file. (ask anas for more infomation). (we can not the name of devices before using it)
--> The data_acq... library has __init__ file. Make sure that the file import "vx_11" and "gpib.." files when update the the library.
29) increase the time out for all modules to 2 seconds after Jack finish the referance method. (100%)
30) refrences are:   add them ihe developer and user manaul.
# Note:   ---> 'o' means time-out is too short.
#         ---> 'e' means empty string
#         ---> 'x' wrong name of device. 
#         ---> 'w' wired error (something wrong with code)
#         ---> 'z' out of range 
#         ---> 'q' timeout input is not number.
#         ---> 's' the input type is not string.
#         ---> 'n' the input can not be converted to int or float (depend)
#         ---> 'd' The given inut does not match the hardcode database.
#         ---> 'c' missing configuration for accpeted device.
------------------------
31) Ip protection layer. So that, if the user input wrong IP, the program should
32) bug with setcurrentDC, if the current input value is out of range, the module run its self twice and freezing with out returning any thing.
33) ask the guys if they want to control the current ? (there is no need to ask, we fix the problem with it) (100%)
34) change the "false,15". Also, think about something else (100%)
35) fix setscale
36) git ride of doc of (def __init__..)   (100%)
37) clean the code ...!
38) make sure every module returns a tuple (and the first item is a boolean true/false signaling if it worked
39) we should try to imagine all the times where things could go wrong.
40) have only one setup script that accepts arguments like 'install', 'uninstall', 'reload'
41) write a script that builds the __init__.py file in fpga_scripts (make sure to count # of plots)
42) ask: 1) is modules are writen in __init__ file by computer or user? 2) cleaness of the generated code ?
43) connect the addmodule tool to GUI
